goldenjson: analysis/data/Cert_Collisions2023_366442_370790_Golden.txt
lumidata: analysis/data/lumi2023.csv
hlt_paths:
  EGamma:
    - SingleEle
object_selection:
  muons:
    field: events.Muon
    cuts:
      pt: events.Muon.pt > 10
      abseta: np.abs(events.Muon.eta) < 2.4
      dxy: np.abs(events.Muon.dxy) < 0.5
      dz: np.abs(events.Muon.dz) < 1
      sip3d: np.abs(events.Muon.sip3d) < 4
      muon_id: tight
      muon_iso: tight
  electrons:
    field: events.Electron
    cuts:
      pt: events.Electron.pt > 10
      abseta: np.abs(events.Electron.eta) < 2.5
      dxy: events.Electron.dxy < 0.5
      dz: events.Electron.dz < 1
      sip3d: events.Electron.sip3d < 4
      electron_id: wp80iso
      electron_muon_dr: delta_r_higher(events.Electron, objects['muons'], 0.4)
  jets:
    field: events.Jet
    cuts:
      min_pt: events.Jet.pt > 20
      abseta: np.abs(events.Jet.eta) < 2.5
      jet_id: tightlepveto
      jet_muon_dr: delta_r_higher(events.Jet, objects['muons'], 0.4)
      jet_electron_dr: delta_r_higher(events.Jet, objects['electrons'], 0.4)
  dielectrons:
    field: select_dielectrons
    cuts:
      dr: LorentzVector.delta_r(objects['dielectrons'].l1, objects['dielectrons'].l2) > 0.02
      opp_charge: objects['dielectrons'].l1.charge * objects['dielectrons'].l2.charge < 0
      mass_window: (objects['dielectrons'].z.mass > 60.0) & (objects['dielectrons'].z.mass < 120.0)
event_selection:
  selections:
    atleast_one_goodvertex: events.PV.npvsGood > 0
    lumimask: get_lumi_mask(events, goldenjson)
    trigger: get_trigger_mask(events, hlt_paths, dataset)
    first_electron_pt: ak.firsts(objects['electrons'].pt) > 33
    second_electron_pt: ak.pad_none(objects['electrons'], target=2)[:, 1].pt > 15
    muon_veto: ak.num(objects["muons"]) == 0
    two_electrons: ak.num(objects['electrons']) == 2
    one_z: ak.num(objects['dielectrons'].z) == 1
  categories:
    base:
      - atleast_one_goodvertex
      - lumimask
      - trigger
      - first_electron_pt
      - second_electron_pt
      - muon_veto
      - two_electrons
      - one_z
histogram_config:
  add_syst_axis: true
  add_weight: true
  axes:
    dielectron_mass:
      type: Regular
      bins: 100
      start: 10
      stop: 150
      label: $m(ee)$ [GeV]
      expression: objects['dielectrons'].z.mass
    dielectron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(ee)$ [GeV]
      expression: objects['dielectrons'].z.pt
    dielectron_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(e_1, e_2)$
      expression: LorentzVector.delta_r(objects['dielectrons'].l1, objects['dielectrons'].l2)
    dielectron_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(e_1, e_2)|$
      expression: np.abs(objects['dielectrons'].l1.eta - objects['dielectrons'].l2.eta)
    leading_electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e_1)$ [GeV]
      expression: objects['dielectrons'].l1.pt
    subleading_electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e_2)$ [GeV]
      expression: objects['dielectrons'].l2.pt
    leading_electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e_1)$
      expression: objects['dielectrons'].l1.eta
    subleading_electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e_2)$
      expression: objects['dielectrons'].l2.eta
    electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e)$ [GeV]
      expression: objects['electrons'].pt
    electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e)$
      expression: objects['electrons'].eta
    electron_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(e)$
      expression: objects['electrons'].phi
    jet_pt:
      type: Regular
      bins: 50
      start: 20
      stop: 500
      label: $p_T(j)$ [GeV]
      expression: objects['jets'].pt
    jet_eta:
      type: Regular
      bins: 50
      start: -2.4
      stop: 2.4
      label: $\eta(j)$
      expression: objects['jets'].eta
    jet_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(j)$
      expression: objects['jets'].phi
    jet_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(j_1, j_2)$
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].delta_r(ak.pad_none(objects['jets'], target=2)[:, 1])
    jet_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(j_1, j_2)|$
      expression: np.abs(ak.pad_none(objects['jets'], target=2)[:, 0].eta -ak.pad_none(objects['jets'], target=2)[:, 1].eta)
    jet_multiplicity:
      type: IntCategory
      categories:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
      label: $N(j)$
      expression: ak.num(objects['jets'])
    leadingjet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvL
    leadingjet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvB
    leadingjet_flavour:
      type: IntCategory
      categories:
        - 0
        - 4
        - 5
      label: HadronFlavour
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].hadronFlavour
    subleadingjet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvL
    subleadingjet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvB
    subleadingjet_flavour:
      type: IntCategory
      categories:
        - 0
        - 4
        - 5
      label: HadronFlavour
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].hadronFlavour
  layout: 
    dielectron_mass: 
      - dielectron_mass
    dielectron_pt: 
      - dielectron_pt
    dielectron_dr: 
      - dielectron_dr
    dielectron_deta: 
      - dielectron_deta
    leading_electron_pt: 
      - leading_electron_pt
    leading_electron_eta: 
      - leading_electron_eta
    subleading_electron_pt: 
      - subleading_electron_pt
    subleading_electron_eta: 
      - subleading_electron_eta
    electron_pt: 
      - electron_pt
    electron_eta: 
      - electron_eta
    electron_phi: 
      - electron_phi
    jet_pt: 
      - jet_pt
    jet_eta: 
      - jet_eta
    jet_phi: 
      - jet_phi
    jet_dr: 
      - jet_dr
    jet_deta: 
      - jet_deta
    jet_multiplicity: 
      - jet_multiplicity
    leading_jet:
      - leadingjet_flavour
      - leadingjet_cvsb
      - leadingjet_cvsl
    subleading_jet:
      - subleadingjet_flavour
      - subleadingjet_cvsb
      - subleadingjet_cvsl