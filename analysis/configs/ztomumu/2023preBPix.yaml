goldenjson: analysis/data/Cert_Collisions2023_366442_370790_Golden.txt
lumidata: analysis/data/lumi2023.csv
hlt_paths:
  Muon: 
    - SingleMu
object_selection:
  muons:
    field: events.Muon
    cuts:
      pt: events.Muon.pt > 10
      abseta: np.abs(events.Muon.eta) < 2.4
      dxy: np.abs(events.Muon.dxy) < 0.5
      dz: np.abs(events.Muon.dz) < 1
      sip3d: np.abs(events.Muon.sip3d) < 4
      muon_id: tight
      muon_iso: tight
  electrons:
    field: events.Electron
    cuts:
      pt: events.Electron.pt > 10
      abseta: np.abs(events.Electron.eta) < 2.5
      dxy: events.Electron.dxy < 0.5
      dz: events.Electron.dz < 1
      sip3d: events.Electron.sip3d < 4
      electron_id: wp80iso
      electron_muon_dr: delta_r_higher(events.Electron, objects['muons'], 0.4)
  jets:
    field: events.Jet
    cuts:
      min_pt: events.Jet.pt > 20
      abseta: np.abs(events.Jet.eta) < 2.5
      jet_id: tightlepveto
      jet_muon_dr: delta_r_higher(events.Jet, objects['muons'], 0.4)
      jet_electron_dr: delta_r_higher(events.Jet, objects['electrons'], 0.4)
  dimuons:
    field: select_dimuons
    cuts:
      dr: LorentzVector.delta_r(objects['dimuons'].l1, objects['dimuons'].l2) > 0.02
      opp_charge: objects['dimuons'].l1.charge * objects['dimuons'].l2.charge < 0
      mass_window: (objects['dimuons'].z.mass > 60.0) & (objects['dimuons'].z.mass < 120.0)
event_selection:
  selections:
    trigger: get_trigger_mask(events, hlt_paths, dataset)
    atleast_one_goodvertex: events.PV.npvsGood > 0
    lumimask: get_lumi_mask(events, goldenjson)
    first_muon_pt: ak.firsts(objects['muons'].pt) > 27
    second_muon_pt: ak.pad_none(objects['muons'], target=2)[:, 1].pt > 15
    electron_veto: ak.num(objects['electrons']) == 0
    two_muons: ak.num(objects['muons']) == 2
    one_z: ak.num(objects['dimuons'].z) == 1
  categories:
    base:
      - atleast_one_goodvertex
      - lumimask
      - trigger
      - first_muon_pt
      - second_muon_pt
      - electron_veto
      - two_muons
      - one_z
histogram_config:
  add_syst_axis: true
  add_weight: true
  axes:
    dimuon_mass:
      type: Regular
      bins: 100
      start: 10
      stop: 150
      label: $m(\mu\mu)$ [GeV]
      expression: objects['dimuons'].z.mass
    dimuon_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(\mu\mu)$ [GeV]
      expression: objects['dimuons'].z.pt
    dimuon_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(\mu_1, \mu_2)$
      expression: LorentzVector.delta_r(objects['dimuons'].l1, objects['dimuons'].l2)
    dimuon_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(\mu_1, \mu_2)|$
      expression: np.abs(objects['dimuons'].l1.eta - objects['dimuons'].l2.eta)
    leading_muon_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(\mu_1)$ [GeV]
      expression: objects['dimuons'].l1.pt
    subleading_muon_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(\mu_2)$ [GeV]
      expression: objects['dimuons'].l2.pt
    leading_muon_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(\mu_1)$
      expression: objects['dimuons'].l1.eta
    subleading_muon_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(\mu_2)$
      expression: objects['dimuons'].l2.eta
    muon_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(\mu)$ [GeV]
      expression: objects['muons'].pt
    muon_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(\mu)$
      expression: objects['muons'].eta
    muon_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(\mu)$
      expression: objects['muons'].phi
    jet_pt:
      type: Regular
      bins: 50
      start: 20
      stop: 500
      label: $p_T(j)$ [GeV]
      expression: objects['jets'].pt
    jet_eta:
      type: Regular
      bins: 50
      start: -2.4
      stop: 2.4
      label: $\eta(j)$
      expression: objects['jets'].eta
    jet_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(j)$
      expression: objects['jets'].phi
    jet_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(j_1, j_2)$
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].delta_r(ak.pad_none(objects['jets'], target=2)[:, 1])
    jet_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(j_1, j_2)|$
      expression: np.abs(ak.pad_none(objects['jets'], target=2)[:, 0].eta -ak.pad_none(objects['jets'], target=2)[:, 1].eta)
    jet_multiplicity:
      type: IntCategory
      categories:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
      label: $N(j)$
      expression: ak.num(objects['jets'])
    leadingjet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvL
    leadingjet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvB
    leadingjet_flavour:
      type: IntCategory
      categories:
        - 0
        - 4
        - 5
      label: HadronFlavour
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].hadronFlavour
    subleadingjet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvL
    subleadingjet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvB
    subleadingjet_flavour:
      type: IntCategory
      categories:
        - 0
        - 4
        - 5
      label: HadronFlavour
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].hadronFlavour
  layout: 
    dimuon_mass: 
      - dimuon_mass
    dimuon_pt: 
      - dimuon_pt
    dimuon_dr: 
      - dimuon_dr
    dimuon_deta: 
      - dimuon_deta
    leading_muon_pt: 
      - leading_muon_pt
    leading_muon_eta: 
      - leading_muon_eta
    subleading_muon_pt: 
      - subleading_muon_pt
    subleading_muon_eta: 
      - subleading_muon_eta
    muon_pt: 
      - muon_pt
    muon_eta: 
      - muon_eta
    muon_phi: 
      - muon_phi
    jet_pt: 
      - jet_pt
    jet_eta: 
      - jet_eta
    jet_phi: 
      - jet_phi
    jet_dr: 
      - jet_dr
    jet_deta: 
      - jet_deta
    jet_multiplicity: 
      - jet_multiplicity
    leading_jet:
      - leadingjet_flavour
      - leadingjet_cvsb
      - leadingjet_cvsl
    subleading_jet:
      - subleadingjet_flavour
      - subleadingjet_cvsb
      - subleadingjet_cvsl