object_selection:
  muons:
    field: events.Muon
    add_cut:
      is_loose:
        - events.Muon.pt > 5
        - np.abs(events.Muon.eta) < 2.4
        - np.abs(events.Muon.dxy) < 0.5
        - np.abs(events.Muon.dz) < 1
        - events.Muon.isGlobal | events.Muon.isTracker
      is_relaxed:
        - objects['muons'].is_loose
        - np.abs(events.Muon.sip3d) < 4
      is_tight:
        - objects['muons'].is_loose
        - objects['muons'].is_relaxed
        - events.Muon.isPFcand | ((events.Muon.highPtId > 0) & (events.Muon.pt > 200))
  electrons:
    field: events.Electron
    add_cut: 
      is_loose:
        - events.Electron.pt > 7
        - np.abs(events.Electron.eta) < 2.5
        - np.abs(events.Electron.dxy) < 0.5
        - np.abs(events.Electron.dz) < 1
      is_relaxed:
        - objects['electrons'].is_loose
        - np.abs(events.Electron.sip3d) < 4
      is_tight:
        - objects['electrons'].is_loose
        - objects['electrons'].is_relaxed
        - working_points.electron_id(events, 'bdt')
    cuts:
      - delta_r_higher(events.Electron, objects['muons'], 0.05)
  fsr_photons:
    field: events.FsrPhoton
    cuts:
      - events.FsrPhoton.pt > 2
      - np.abs(events.FsrPhoton.eta) < 2.4
      - events.FsrPhoton.relIso03 < 1.8
  leptons:
    field: select_zzto4l_leptons
  zcandidates:
    field: select_zcandidates 
    add_cut:
      is_ossf:
        - objects['zcandidates'].l1.pdgId == -objects['zcandidates'].l2.pdgId
      is_sr:
        - objects['zcandidates'].is_ossf
        - (1*objects['zcandidates'].l1.is_tight + 1*objects['zcandidates'].l2.is_tight) == 2
      is_1fcr:
        - objects['zcandidates'].is_ossf
        - objects['zcandidates'].l1.is_relaxed
        - objects['zcandidates'].l2.is_relaxed
        - (1*objects['zcandidates'].l1.is_tight + 1*objects['zcandidates'].l2.is_tight) == 1
      is_2fcr:
        - objects['zcandidates'].is_ossf
        - objects['zcandidates'].l1.is_relaxed
        - objects['zcandidates'].l2.is_relaxed
        - (1*objects['zcandidates'].l1.is_tight + 1*objects['zcandidates'].l2.is_tight) == 0
    cuts: 
      - (objects['zcandidates'].p4.mass > 12) & (objects['zcandidates'].p4.mass < 120)
  zzcandidates:
    field: select_zzcandidates
    cuts:
      - objects['zzcandidates'].z1.is_sr & objects['zzcandidates'].z2.is_sr
      - (objects['zzcandidates'].z1.p4 + objects['zzcandidates'].z2.p4).mass > 70    
  zllcandidates:
    field: select_zllcandidates_os
    cuts:
      - objects['zllcandidates'].z1.is_sr & (objects['zllcandidates'].z2.is_1fcr | objects['zllcandidates'].z2.is_2fcr)
      - (objects['zllcandidates'].z1.p4 + objects['zllcandidates'].z2.p4).mass > 70
  best_zllcandidate_1fcr:
    field: select_best_1fcr_zllcandidate
  best_zllcandidate_2fcr:
    field: select_best_2fcr_zllcandidate
event_selection:
  hlt_paths:
    - SingleMu
    - DiMu
    - TriMu
    - SingleEle
    - DiEle
    - MuEle
  selections:
    trigger: get_zzto4l_trigger_mask(events, hlt_paths, dataset, year)
    lumimask: get_lumi_mask(events, year)
    atleast_one_goodvertex: events.PV.npvsGood > 0
    no_sr_candidate: ak.num(objects['zzcandidates']) == 0
    atleast_one_zll: ak.num(objects['zllcandidates']) >= 1
  categories:
    base:
      - trigger
      - lumimask
      - atleast_one_goodvertex
      - no_sr_candidate
      - atleast_one_zll
corrections:
  objects:
    - jets
    - muons
    - electrons
  event_weights:
    genWeight: true
    pileupWeight: true
    partonshowerWeight: false
    lhepdfWeight: false
    lhescaleWeight: false
    nnlopsWeight: false
    electron:
      - id: false
      - reco: true
      - trigger: false
histogram_config:
  axes:
    z_mass_1fcr:
      type: Regular
      bins: 54
      start: 12
      stop: 120
      label: $m(Z)$ [GeV]
      expression: objects['best_zllcandidate_1fcr'].z1.p4.mass
    ll_mass_1fcr:
      type: Regular
      bins: 54
      start: 12
      stop: 120
      label: $m(\ell\ell)$ [GeV]
      expression: objects['best_zllcandidate_1fcr'].z2.p4.mass
    zll_mass_1fcr:
      type: Regular
      bins: 40
      start: 70
      stop: 870
      label: $m(Z\ell\ell)$ [GeV]
      expression: objects['best_zllcandidate_1fcr'].p4.mass
    zll_pt_1fcr:
      type: Regular
      bins: 40
      start: 0
      stop: 400
      label: $p_T(Z\ell\ell)$ [GeV]
      expression: objects['best_zllcandidate_1fcr'].p4.pt
    z_flavor_1fcr:
      type: IntCategory
      categories:
        - 22
        - 26
      label: Zflavor
      expression: np.abs(objects['best_zllcandidate_1fcr'].z1.l1.pdgId) + np.abs(objects['best_zllcandidate_1fcr'].z1.l2.pdgId)
    ll_flavor_1fcr:
      type: IntCategory
      categories:
        - 22
        - 26
      label: LLflavor
      expression: np.abs(objects['best_zllcandidate_1fcr'].z2.l1.pdgId) + np.abs(objects['best_zllcandidate_1fcr'].z2.l2.pdgId)
    z_mass_2fcr:
      type: Regular
      bins: 54
      start: 12
      stop: 120
      label: $m(Z)$ [GeV]
      expression: objects['best_zllcandidate_2fcr'].z1.p4.mass
    ll_mass_2fcr:
      type: Regular
      bins: 54
      start: 12
      stop: 120
      label: $m(\ell\ell)$ [GeV]
      expression: objects['best_zllcandidate_2fcr'].z2.p4.mass
    zll_mass_2fcr:
      type: Regular
      bins: 40
      start: 70
      stop: 870
      label: $m(Z\ell\ell)$ [GeV]
      expression: objects['best_zllcandidate_2fcr'].p4.mass
    z_flavor_2fcr:
      type: IntCategory
      categories:
        - 22
        - 26
      label: Zflavor
      expression: np.abs(objects['best_zllcandidate_2fcr'].z1.l1.pdgId) + np.abs(objects['best_zllcandidate_2fcr'].z1.l2.pdgId)
    ll_flavor_2fcr:
      type: IntCategory
      categories:
        - 22
        - 26
      label: LL flavor
      expression: np.abs(objects['best_zllcandidate_2fcr'].z2.l1.pdgId) + np.abs(objects['best_zllcandidate_2fcr'].z2.l2.pdgId)
  layout:
    zll_1fcr:
      - zll_mass_1fcr
      - z_flavor_1fcr
      - ll_flavor_1fcr
    zll_2fcr:
      - zll_mass_2fcr
      - z_flavor_2fcr
      - ll_flavor_2fcr
  add_syst_axis: true
  add_weight: true